# -*- coding: utf-8 -*-
"""amazon_sentiments

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JqoojGEK9hcAcWa3MybyRlpKrzo_-dNk
"""

import pandas as pd
from sklearn. feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression 
from sklearn.preprocessing import StandardScaler
import re
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer 
from sklearn.utils import shuffle 
from sklearn.metrics import confusion_matrix,f1_score,precision_score,recall_score 
wordnet_lemmatizer= WordNetLemmatizer()

from textblob import TextBlob

df=pd.read_csv("/content/Amazon_Unlocked_Mobile.csv")
df.head()

df.info()

print(df.describe())

df = df.dropna()
df

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
plt.figure(figsize=(10,5))
sns.countplot(df['Rating'], palette=sns.color_palette("RdYlGn", 5))
plt.title(" Ratings across the entire dataset", fontweight='bold', fontsize=15)
plt.xlabel("Ratings of Reviews")
plt.ylabel("Number of reviews corresponding to each of 5 ratings")
plt.show();

labels = [f'{k} ({df["Rating"].value_counts()[k]} samples)' for k in df['Rating'].value_counts().keys()]
sizes = dict(df['Rating'].value_counts()).values()

fig1, ax1 = plt.subplots(figsize=(8,8))
ax1.pie(sizes, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal') 
ax1.set_title("Distribution of ratings in reviews",pad=40, fontweight='bold', fontsize=20)
plt.show();

def remove_pattern(input_txt, pattern):
    r= re.findall(pattern, input_txt)
    for word in r:
        input_txt = re.sub(word, "", input_txt)
    return input_txt

df['clean_Reviews']= df['Reviews'].str.replace("[^a-zA-Z]"," ")
df

df['clean_Reviews']=df['clean_Reviews'].apply(lambda x: " ".join([w for w in x.split() if len(w)>3]))
df

df['clean_Reviews']= df['clean_Reviews'].str.lower()
df

tokenized_reviews= df['clean_Reviews'].apply(lambda x: x.split())
tokenized_reviews

from nltk.stem.porter import PorterStemmer
stemmer = PorterStemmer()

tokenized_reviews= tokenized_reviews.apply(lambda sentence: [stemmer.stem(word) for word in sentence])
tokenized_reviews.head()

from sklearn.feature_extraction.text import CountVectorizer
bow_vectorizer= CountVectorizer(max_df=0.90, min_df=2, max_features=1000, stop_words='english')
bow= bow_vectorizer.fit_transform(df['clean_Reviews'])



bow[0].toarray()

import matplotlib.pyplot as plt

#b
all_words= " ".join([sentence for sentence in df['clean_Reviews']])
from wordcloud import WordCloud
wordcloud = WordCloud(width=800, height=500, random_state=42, max_font_size=100).generate(all_words)
plt.figure(figsize=(15,8))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

df.drop(['Product Name', 'Brand Name', 'Price', 'Review Votes'], axis = 1, inplace = True)
df.head(5)

X_train_df = pd.concat([X_train, y_train], axis = 1)
X_train_df = X_train_df.reset_index(drop=True)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df['Reviews'], df['Rating'], test_size=0.20, random_state=1, stratify=df['Rating'])
plt.figure(figsize=(10,5))
sns.countplot(y_train, palette=sns.color_palette("plasma", 5), alpha = 1)
sns.countplot(y_test,facecolor=(0, 0, 0, 0), linewidth=2, edgecolor=sns.color_palette("dark", 3))

X_train_df.head()

import numpy as np
np.random.seed(34)
df1 = df.sample(frac = 0.8)
df1['sentiments'] = df1.Rating.apply(lambda x: 0 if x in [1, 2] else 1)
df1.head()

def ReviewCategory(score):
    if score >= 4:
        return 'pos'
    elif (score <= 2) & (score > 0):
        return 'neg'
    else:
        return 'neu'

df['Category']=df['Rating'].apply(lambda x: ReviewCategory(x))

CategoryCount=df.groupby('Category')['Reviews'].count().reset_index()
CategoryCount=CategoryCount.rename(columns={'Reviews':'Count'})

CategoryCount.plot(x="Category",y="Count",kind="bar",title="Category V/S No. of Reviews")
plt.show()

y=input("Type your sentence: ")
edu=TextBlob(y)
x=edu.sentiment.polarity
#negative = x<0 , neutral = 0 and positive x>0 && x<=1
if x<0:
  print("Negative")
elif x==0:
  print("Neutral")
elif x>0 and x<=1:
  print("Positive")